###########################
テーマ活動
###########################


テーマの具体化
======================

塾開始当初はアプリケーションの知識がないことから、まずはterasolunaチュートリアル
(TERASOLUNA Server Framework for Java (5.x) Development Guideline 5.7.0.RELEASE)
、「AWSで作るクラウドネイティブアプリケーション」を実施してきました。

塾活動開始から3ヶ月経ち、基礎知識習得と並行で、テーマについて具体化を行おうと思っています。

現在のテーマとして、AWSマネージドサービスを活用したアプリケーションアーキテクチャの
検討・検証を通して、オンライン・バッチアプリケーションにおけるさまざまな設計パターンを整理し実装コードとして
まとめることを挙げています。

具体化に際し、現状について整理しました。

AWS公式では以下の通り代表的なサーバレスアーキテクチャの構成がサンプルとして提供されています。

AWS公式「形で考えるサーバーレス設計」

https://aws.amazon.com/jp/serverless/patterns/serverless-pattern/


現在のテーマでは、具体化ができていないことから上記と差別化が図れていないため、差別化を図るために、以下パターンで検討を進めました。


	**・サーバレスアーキテクチャの問題点を確認し、テーマを具体化**

	**・自身と関わりが多い事例をテーマとして活動**

(他にもこういった観点で検討してもいいのでは、というコメントがあればいただければと思います。)


サーバレスアーキテクチャの問題点を確認
----------------------------------------------------------
（私の認識ですが）サーバレスアーキテクチャにおける問題点において、
は以下の通りだと考えています。


	①サーバーレスアーキテクチャにおいて適切に開発／構築できるエンジニアは少ない。

	②アプリケーションの連携が難しい（複数のサービスが関連して動作するため、一般的なアプリケーションよりもモニタリングなどは複雑になる）サービスの内部構造が理解しにくい。

①へのアプローチは、サンプルコードをまとめる、ベストプラクティスや、技量習得の教材や進め方
についてまとめる、等の対応が考えられます。

②へのアプローチは、cloudwatchやAWS X-Ray等のサービスを活用し、汎用的な手順整備を行う、実機で構築、
テストを経て、内部ロジックを明らかにしていく、等の対応が考えられます。


自身と関わりが深い事例をテーマとして検討
----------------------------------------------------------
業務オンライン、バッチ処理のリファクタリング検討として、
以下処理フローの代替を検討するといったテーマを検討しています。


オンライン処理フロー
^^^^^^^^^^^^^^^^^^^^^^^^

Citrix Virtual Appsによるシンクライアント機能を用いて、SBCサーバの画面APにアクセス。
SBCサーバからAPサーバの業務ロジックを実行する。

業務ロジックは処理に応じてDBサーバを参照・更新し、その結果を画面APに返す。

・フロントエンド::

	クライアント端末　→　LB　→　Citrix管理サーバ → SBCサーバ

SBCサーバ上のアプリケーションをcitrixの機能を用いて、公開。※SBC方式

LBでcitrix管理サーバへの振り分け、citrix管理サーバがSBCサーバへの負荷分散を実現
SBC上でアプリケーションは.Netframeworkで作成。


・バックエンド::

	SBCサーバ　→　ELB　→ APサーバ　→　DBサーバ

バックエンドLBを通り、APサーバ、アプリケーションサーバの機能で負荷分散を実施している。
アプリケーションサーバはIBM WebSphere Application Server ,フレームワークとしてFinalunaFrameworkを利用。


バッチ処理フロー
^^^^^^^^^^^^^^^^^^^^^^^^
APサーバ　→ DBサーバ 

JP1 AJSを利用して業務ジョブを実行


検証内容案
^^^^^^^^^^^^^^^^^^^^^^^^

案としては以下が考えられると思っており、それについて検討を行いたいと考えています。

	・Citrix Virtual Appsをマネージドサービスへ置き換え(AWS Appstream2.0)

	・疎結合化の観点から、セッション管理をRedis/dynamoに置き換え（現状はRDB）

	・コンテナ化(EC2による実装をコンテナベースに置き換え)※Appstreamの場合、内部的にはEC2のため、適用範囲を検討の必要あり

	・バッチ処理をDRSProxyなど利用しながら、Lambdaで実装※対象を選定して、スモールスタートになるか。

	・アプリケーションをSaaS等に置き換える。(ex.S3をDatalakeとして利用。AWS Gleuなどをりよし、DM/DWHへload、BI(QuickSightや3rdparty)等で代替


テーマ選定
----------------------------------------------------------

	**・サーバレスアーキテクチャの問題点を確認**

	**・自身と関わりが多い事例をテーマとして検討**

上記二つについて、上述の通り検討していましたが、以下理由から
関わりの深い事例についてのリファクタリング（Appstreamの利用まとめ）をテーマにしたいと考えています。

	・サーバレスアーキテクチャの知識がまだ不十分で、問題点を正確に把握することが難しい。

	・自身の理解が深い事例について実施することで、時間もかぎれらている中でも対応が可能な見込み。

	・AWS AppStreamを利用した事例があまりないため、差別化が図れる。※逆に何か理由があり利用されていないものかも。。

	・Workspacesほどの自由度を与えたくないような場合等、別の選択肢として理解しておくことは必要。(メリット/デメリットや制約について)

	・業務に直結する。

（余力があれば、全体構成についてのリファクタリング案を検討したい）


